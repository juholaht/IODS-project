projection_x<-X%*%projection_x
projection_x<-projection_x%*%t(X)
}
projection_x <- X
count_prjojection(X, projection_x)
projection_x
projection_x <- X
projection_x
count_prjojection(X, projection_x)
projection_x
count_prjojection <-  function(X) {
projection_x<-t(X)%*%X
projection_x<-solve(projection_x)
projection_x<-X%*%projection_x
projection_x<-projection_x%*%t(X)
return(projection_x)
}
count_prjojection(X)
projection_x<-count_prjojection(X)
projection_x
y_hat <- projection_x%*%y_act
y_hat
I <- matrix(c(1,0,0,0,1,0,0,0,1), nrow = 3)
I
residual <-(I-projection_x)%*%y_act
residual
X
X1 <- matrix(c(1,1,1), nrow = 3)
X1
X2<- matrix(c(3,2,0), nrow = 3)
X2
projection_x1 <- count_prjojection(X1)
I
Mx1 <- I - projection_x1
Mx1%*%X2
Mx1%*%X1
projection_x
eigen_projection_x <- eigen(projection_x)
eigen_projection_x$values
eigen_projection_x1 <- eigen(projection_x1)
eigen_projection_x1$values
library(readr)
talon_kulmat <- read_csv("Random kansio/talon_kulmat.txt")
View(talon_kulmat)
coordinates_matrix <- talon_kulmat
schoelace_fun <- function(coordinates) {
areas <- rep.int(0, nrow(coordinates))
for(i in 1:c(nrow(coordinates)-1)) {
det <- coordinates[i,1]*coordinates[i+1,2]-coordinates[i+1,1]*coordinates[i,2]
area <- 0.5*det
areas[i] <- area
}
print(sum(areas))
}
area_house_px <- schoelace_fun(coordinates_matrix)
coordinates_matrix <- as.matrx(talon_kulmat)
coordinates_matrix <- matrix(talon_kulmat)
coordinates_matrix
coordinates_matrix <- as.matrix(talon_kulmat)
coordinates_matrix
schoelace_fun <- function(coordinates) {
areas <- rep.int(0, nrow(coordinates))
for(i in 1:c(nrow(coordinates)-1)) {
det <- coordinates[i,1]*coordinates[i+1,2]-coordinates[i+1,1]*coordinates[i,2]
area <- 0.5*det
areas[i] <- area
}
print(sum(areas))
}
area_house_px <- schoelace_fun(coordinates_matrix)
area_house_real <- 78
scaler <- sqrt(area_house_real/-area_house_px)
lengths_fun <- function(coordinates){
lengths <- rep.int(0,nrow(coordinates)-1)
for(j in 1:c(nrow(coordinates)-1)) {
dif_y <- coordinates[j,2] - coordinates[j+1,2]
dif_x <- coordinates[j,1] - coordinates[j+1,1]
length <- sqrt((dif_y^2)+(dif_x^2))
lengths[j] <- length
}
print(scaler*lengths)
}
lengths_fun(coordinates_matrix)
View(coordinates_matrix, "Seinien pituudet")
length_walls <- lengths_fun(coordinates_matrix)
View(length_walls, "Seinien pituudet")
?sink()
length_walls <- capture.output(lengths_fun(coordinates_matrix))
cat("Seinien pituudet", length_walls, file = "C:/Users/juhol/OneDrive/Documents/seinien_pituudet.csv", sep = "n")
library(readr)
library(forecast)
library(dplyr)
library(ggplot2)
rm(list=ls()) # rm hitory
TPdata <- read_delim("TPdata.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
head(TPdata)
tail(TPdata)
colnames(TPdata)
TPdata$PCR <- ts(TPdata$PCR, frequency = 4, start = c(1970,1), end = c(2007,4))
TPdata$PCR_log <- log(ts(TPdata$PCR, frequency = 4, start = c(1970,1), end = c(2007,4)))
str(TPdata)
plot.ts(TPdata$PCR_log, main=" LOG Private Consumption")
# Finding best AR
auto.arima(TPdata$PCR_log, ic="bic", d=1, max.p=6, max.q=0, seasonal=FALSE, trace=TRUE)  # BIC
# Selected AR (3,1,0)
p2 <- 3
d2 <- 1
q2 <- 0
model_ar <- Arima(TPdata$PCR_log, order = c(p2, d2, q2), include.mean=TRUE, method="CSS-ML")
# Diagnostic chekcs for AR model
# Ljung-Box Portmanteau test statistic for autocorrelation at lags from 1 to K
e2 = model_ar$residuals    # COMPUTE RESIDUALS
plot (e2, type="l")
Acf(e2,12)
Box.test(e2, lag=6, type="Ljung-Box", fitdf=(p2+q2))    # LJUNG-BOX TEST
# p-value = 0.006562 -> Significant autocorrelation
Box.test(e2^2, lag=6, type="Ljung-Box")  # MCLEOD-LI TEST
# p-value = 0.3321 -> Significant autocorrelation
# Diagnostic chekcs for ARIMA model
# Ljung-Box Portmanteau test statistic for autocorrelation at lags from 1 to K
e = model_arima$residuals    # COMPUTE RESIDUALS
plot (e, type="l")
Acf(e,12)
Box.test(e, lag=6, type="Ljung-Box", fitdf=(p2+q2))    # LJUNG-BOX TEST
# p-value = 0.006562 -> Significant autocorrelation
Box.test(e^2, lag=6, type="Ljung-Box")  # MCLEOD-LI TEST
# p-value = 0.3321
# Finding best ARIMA
auto.arima(TPdata$PCR_log, ic="bic", d=1, max.p=6, max.q=6, seasonal=FALSE, trace=TRUE)  # BIC
# Selected model ARIMA(1,1,1)
p1 <- 1
d1 <- 1
q1 <- 1
model_arima <- Arima(TPdata$PCR_log, order = c(p1, d1, q1), include.mean=TRUE, method="CSS-ML")
# Diagnostic chekcs for ARIMA model
# Ljung-Box Portmanteau test statistic for autocorrelation at lags from 1 to K
e1 = model_arima$residuals    # COMPUTE RESIDUALS
plot (e1, type="l")
Acf(e1,12)
Box.test(e1, lag=6, type="Ljung-Box", fitdf=(p2+q2))    # LJUNG-BOX TEST
# p-value = 0.216 -> Insignificant autocorrelation
Box.test(e1^2, lag=6, type="Ljung-Box")  # MCLEOD-LI TEST
# p-value = 0.7611
# Selected model ARIMA(1,1,1) is preferred to AR (3,1,0)
# IMPULSE RESPONSE FUNCTION for AR(3,1,0)
max.lag = 10
ar.coef=0
ma.coef=0
if (p2>0) {ar.coef = model_ar$coef[1:p2]}
if (q2>0) {ma.coef = model_ar$coef[(p2+1):(p2+q2)]}
IRF <- c(1, ARMAtoMA(ar=ar.coef, ma=ma.coef, lag.max=max.lag))
plot(seq(0,max.lag,1),IRF, type="l", xlab="lag")
# IMPULSE RESPONSE FUNCTION for ARIMA(1,1,1)
max.lag = 10
ar.coef=0
ma.coef=0
if (p1>0) {ar.coef = model_ar$coef[1:p1]}
if (q1>0) {ma.coef = model_ar$coef[(p1+1):(p1+q1)]}
IRF <- c(1, ARMAtoMA(ar=ar.coef, ma=ma.coef, lag.max=max.lag))
plot(seq(0,max.lag,1),IRF, type="l", xlab="lag")
# ARIMA is also preferred in this one
model_ar <- Arima(TPdata$PCR_log, order = c(p2, d2, q2), include.mean=TRUE, method="CSS-ML")
rm(list=ls()) # rm hitory
TPdata <- read_delim("TPdata.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
setwd("C:/Users/juhol/OneDrive/Documents/tyokansio/Econometrics_II")
TPdata <- read_delim("TPdata.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
setwd("C:/Users/juhol/OneDrive/Documents/tyokansio/Econometrics_II/assigment_2")
TPdata <- read_delim("TPdata.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
head(TPdata)
tail(TPdata)
colnames(TPdata)
TPdata$PCR <- ts(TPdata$PCR, frequency = 4, start = c(1970,1), end = c(2007,4))
TPdata$PCR_log <- log(ts(TPdata$PCR, frequency = 4, start = c(1970,1), end = c(2007,4)))
str(TPdata)
plot.ts(TPdata$PCR_log, main=" LOG Private Consumption")
# Finding best AR
auto.arima(TPdata$PCR_log, ic="bic", d=1, max.p=6, max.q=0, seasonal=FALSE, trace=TRUE)  # BIC
# Selected AR (3,1,0)
p2 <- 3
d2 <- 1
q2 <- 0
model_ar <- Arima(TPdata$PCR_log, order = c(p2, d2, q2), include.mean=TRUE, method="CSS-ML")
# Diagnostic chekcs for AR model
# Ljung-Box Portmanteau test statistic for autocorrelation at lags from 1 to K
e2 = model_ar$residuals    # COMPUTE RESIDUALS
plot (e2, type="l")
Acf(e2,12)
Box.test(e2, lag=6, type="Ljung-Box", fitdf=(p2+q2))    # LJUNG-BOX TEST
# p-value = 0.006562 -> Significant autocorrelation
Box.test(e2^2, lag=6, type="Ljung-Box")  # MCLEOD-LI TEST
# p-value = 0.3321 -> Significant autocorrelation
# Diagnostic chekcs for ARIMA model
# Ljung-Box Portmanteau test statistic for autocorrelation at lags from 1 to K
e = model_arima$residuals    # COMPUTE RESIDUALS
plot (e, type="l")
Acf(e,12)
Box.test(e, lag=6, type="Ljung-Box", fitdf=(p2+q2))    # LJUNG-BOX TEST
# p-value = 0.006562 -> Significant autocorrelation
Box.test(e^2, lag=6, type="Ljung-Box")  # MCLEOD-LI TEST
# p-value = 0.3321
# Finding best ARIMA
auto.arima(TPdata$PCR_log, ic="bic", d=1, max.p=6, max.q=6, seasonal=FALSE, trace=TRUE)  # BIC
# Selected model ARIMA(1,1,1)
p1 <- 1
d1 <- 1
q1 <- 1
model_arima <- Arima(TPdata$PCR_log, order = c(p1, d1, q1), include.mean=TRUE, method="CSS-ML")
# Diagnostic chekcs for ARIMA model
# Ljung-Box Portmanteau test statistic for autocorrelation at lags from 1 to K
e1 = model_arima$residuals    # COMPUTE RESIDUALS
plot (e1, type="l")
Acf(e1,12)
Box.test(e1, lag=6, type="Ljung-Box", fitdf=(p2+q2))    # LJUNG-BOX TEST
# p-value = 0.216 -> Insignificant autocorrelation
Box.test(e1^2, lag=6, type="Ljung-Box")  # MCLEOD-LI TEST
# p-value = 0.7611
# Selected model ARIMA(1,1,1) is preferred to AR (3,1,0)
# IMPULSE RESPONSE FUNCTION for AR(3,1,0)
max.lag = 10
ar.coef=0
ma.coef=0
if (p2>0) {ar.coef = model_ar$coef[1:p2]}
if (q2>0) {ma.coef = model_ar$coef[(p2+1):(p2+q2)]}
IRF <- c(1, ARMAtoMA(ar=ar.coef, ma=ma.coef, lag.max=max.lag))
plot(seq(0,max.lag,1),IRF, type="l", xlab="lag")
# IMPULSE RESPONSE FUNCTION for ARIMA(1,1,1)
max.lag = 10
ar.coef=0
ma.coef=0
if (p1>0) {ar.coef = model_ar$coef[1:p1]}
if (q1>0) {ma.coef = model_ar$coef[(p1+1):(p1+q1)]}
IRF <- c(1, ARMAtoMA(ar=ar.coef, ma=ma.coef, lag.max=max.lag))
plot(seq(0,max.lag,1),IRF, type="l", xlab="lag")
# ARIMA is also preferred in this one
?forecast
for_model_ar = Arima(window(TPdata$PCR_log,end=c(2005,4)), order=c(p2,0,q2), include.mean=TRUE, method="CSS-ML")
summary(for_model_ar)
?accuracy()
est_model_ar = Arima(window(TPdata$PCR_log,end=c(2005,4)), order=c(p2,0,q2), include.mean=TRUE, method="CSS-ML")
summary(for_model_ar)
# POINT FORECASTS
h = 8      # FORECAST HORIZON
for_model_ar = forecast(est_model_ar, h=h)
print(for_model_ar$mean)
est_model_ar = Arima(window(TPdata$PCR_log,end=c(2005,4)), order=c(p2,d2,q2), include.mean=TRUE, method="CSS-ML")
summary(for_model_ar)
# POINT FORECASTS
h = 8      # FORECAST HORIZON
for_model_ar = forecast(est_model_ar, h=h)
print(for_model_ar$mean)
summary(est_model_ar)
est_model_arima = Arima(window(TPdata$PCR_log,end=c(2005,4)), order=c(p1,d1,q1), include.mean=TRUE, method="CSS-ML")
summary(est_model_arima)
# POINT FORECASTS
h = 8      # FORECAST HORIZON
for_model_arima = forecast(est_model_arima, h=h)
print(for_model_arima$mean)
accuracy(for_model_ar)
accuracy(for_model_arima)
print(for_model_arima$mean)
(for_model_arima
njce
for_model_arima
print(window(y,c(2009,1)))
plot(for_model_ar)
lines(window(TPdata$PCR_log,start=c(2006,1)),col="red")
plot(for_model_arima)
lines(window(TPdata$PCR_log,start=c(2006,1)),col="red")
for_model_ar = forecast(est_model_ar, h=h, level=0.90)
print(for_model_ar$mean)
for_model_arima = forecast(est_model_arima, h=h, level=0.90)
print(for_model_arima$mean)
accuracy(for_model_ar)
accuracy(for_model_arima)
plot(for_model_ar)
lines(window(TPdata$PCR_log,start=c(2006,1)),col="red")
plot(for_model_arima)
lines(window(TPdata$PCR_log,start=c(2006,1)),col="red")
rm(list=ls()) # rm hitory
setwd("C:/Users/juhol/OneDrive/Documents/tyokansio/Econometrics_II/assigment_2")
TPdata <- read_delim("TPdata.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
head(TPdata)
tail(TPdata)
colnames(TPdata)
TPdata$PCR <- ts(TPdata$PCR, frequency = 4, start = c(1970,1), end = c(2005,4))
TPdata$PCR_log <- log(ts(TPdata$PCR, frequency = 4, start = c(1970,1), end = c(2005,4)))
PCR <- ts(TPdata$PCR, frequency = 4, start = c(1970,1), end = c(2005,4))
TPdata$
PCR_log <- log(ts(TPdata$PCR, frequency = 4, start = c(1970,1), end = c(2005,4)))
PCR_log <- log(ts(TPdata$PCR, frequency = 4, start = c(1970,1), end = c(2005,4)))
plot.ts(PCR_log, main=" LOG Private Consumption")
auto.arima(TPdata$PCR_log, ic="bic", d=1, max.p=6, max.q=0, seasonal=FALSE, trace=TRUE)  # BIC
auto.arima(PCR_log, ic="bic", d=1, max.p=6, max.q=0, seasonal=FALSE, trace=TRUE)  # BIC
auto.arima(PCR_log, ic="bic", d=1, max.p=6, max.q=0, seasonal=T, trace=TRUE)  # BIC
auto.arima(PCR_log, ic="bic", d=1, max.p=6, max.q=0, seasonal=F, trace=TRUE)  # BIC
p2 <- 3
d2 <- 1
q2 <- 0
model_ar <- Arima(PCR_log, order = c(p2, d2, q2), include.mean=TRUE, method="CSS-ML")
e2 = model_ar$residuals    # COMPUTE RESIDUALS
plot (e2, type="l")
Acf(e2,12)
Box.test(e2, lag=6, type="Ljung-Box", fitdf=(p2+q2))    # LJUNG-BOX TEST
Box.test(e2^2, lag=6, type="Ljung-Box")  # MCLEOD-LI TEST
# Finding best ARIMA
auto.arima(TPdata$PCR_log, ic="bic", d=1, max.p=6, max.q=6, seasonal=FALSE, trace=TRUE)  # BIC
auto.arima(PCR_log, ic="bic", d=1, max.p=6, max.q=0, seasonal=F, trace=TRUE)  # BIC
p2 <- 4
d2 <- 1
q2 <- 0
model_ar <- Arima(PCR_log, order = c(p2, d2, q2), include.mean=TRUE, method="CSS-ML")
e2 = model_ar$residuals    # COMPUTE RESIDUALS
plot (e2, type="l")
Acf(e2,12)
Box.test(e2, lag=6, type="Ljung-Box", fitdf=(p2+q2))    # LJUNG-BOX TEST
Box.test(e2^2, lag=6, type="Ljung-Box")  # MCLEOD-LI TEST
# Finding best ARIMA
auto.arima(TPdata$PCR_log, ic="bic", d=1, max.p=6, max.q=6, seasonal=FALSE, trace=TRUE)  # BIC
# Finding best ARIMA
auto.arima(PCR_log, ic="bic", d=1, max.p=6, max.q=6, seasonal=FALSE, trace=TRUE)  # BIC
p1 <- 1
d1 <- 1
q1 <- 2
model_arima <- Arima(TPdata$PCR_log, order = c(p1, d1, q1), include.mean=TRUE, method="CSS-ML")
model_arima <- Arima(PCR_log, order = c(p1, d1, q1), include.mean=TRUE, method="CSS-ML")
e1 = model_arima$residuals    # COMPUTE RESIDUALS
plot (e1, type="l")
Acf(e1,12)
Box.test(e1, lag=6, type="Ljung-Box", fitdf=(p2+q2))    # LJUNG-BOX TEST
Box.test(e1^2, lag=6, type="Ljung-Box")  # MCLEOD-LI TEST
max.lag = 10
ar.coef=0
ma.coef=0
if (p2>0) {ar.coef = model_ar$coef[1:p2]}
if (q2>0) {ma.coef = model_ar$coef[(p2+1):(p2+q2)]}
IRF <- c(1, ARMAtoMA(ar=ar.coef, ma=ma.coef, lag.max=max.lag))
plot(seq(0,max.lag,1),IRF, type="l", xlab="lag")
max.lag = 10
ar.coef=0
ma.coef=0
if (p1>0) {ar.coef = model_ar$coef[1:p1]}
if (q1>0) {ma.coef = model_ar$coef[(p1+1):(p1+q1)]}
IRF <- c(1, ARMAtoMA(ar=ar.coef, ma=ma.coef, lag.max=max.lag))
plot(seq(0,max.lag,1),IRF, type="l", xlab="lag")
est_model_ar = Arima(window(TPdata$PCR_log,end=c(2005,4)), order=c(p2,d2,q2), include.mean=TRUE, method="CSS-ML")
est_model_ar = Arima(window(PCR_log,end=c(2005,4)), order=c(p2,d2,q2), include.mean=TRUE, method="CSS-ML")
summary(est_model_ar)
# POINT FORECASTS
h = 8      # FORECAST HORIZON
for_model_ar = forecast(est_model_ar, h=h, level=0.90)
print(for_model_ar$mean)
est_model_arima = Arima(window(PCR_log,end=c(2005,4)), order=c(p1,d1,q1), include.mean=TRUE, method="CSS-ML")
summary(est_model_arima)
# POINT FORECASTS
h = 8      # FORECAST HORIZON
for_model_arima = forecast(est_model_arima, h=h, level=0.90)
print(for_model_arima$mean)
accuracy(for_model_ar)
accuracy(for_model_arima)
plot(for_model_ar)
lines(window(TPdata$PCR_log,start=c(2006,1)),col="red")
lines(window(PCR_log,start=c(2006,1)),col="red")
#Plotting AR(4,1,0)
tail(PCR_log)
PCR_log_real <- log(ts(TPdata$PCR, frequency = 4, start = c(1970,1), end = c(2007,4)))
lines(window(PCR_log_real,start=c(2006,1)),col="red")
plot(for_model_arima)
lines(window(PCR_log_real,start=c(2006,1)),col="red")
plot (e1, type="l")
Acf(e1,12)
Box.test(e1, lag=6, type="Ljung-Box", fitdf=(p2+q2))    # LJUNG-BOX TEST
Box.test(e1, lag=6, type="Ljung-Box", fitdf=(p2+q2))    # LJUNG-BOX TEST
Box.test(e2, lag=6, type="Ljung-Box", fitdf=(p2+q2))    # LJUNG-BOX TEST
e2 = model_ar$residuals    # COMPUTE RESIDUALS
plot (e2, type="l")
Acf(e2,12)
acf(e2,12)
Acf(e2,12)
Box.test(e2, lag=6, type="Ljung-Box", fitdf=(p2+q2))    # LJUNG-BOX TEST
plot(for_model_ar)
PCR_log_real <- log(ts(TPdata$PCR, frequency = 4, start = c(1970,1), end = c(2007,4)))
lines(window(PCR_log_real,start=c(2006,1)),col="red")
plot(for_model_arima)
lines(window(PCR_log_real,start=c(2006,1)),col="red")
?plot
plot(for_model_ar, xlim = (c(2004, 1), c(2007,4)))
plot(for_model_ar, xlim = c(c(2004, 1), c(2007,4)))
plot(for_model_ar)
PCR_log_real <- log(ts(TPdata$PCR, frequency = 4, start = c(1970,1), end = c(2007,4)))
lines(window(PCR_log_real,start=c(2006,1)),col="red")
plot(for_model_arima)
lines(window(PCR_log_real,start=c(2006,1)),col="red")
plot(for_model_arima)
lines(window(PCR_log_real,start=c(2006,1)),col="red")
accuracy(for_model_ar)
accuracy(for_model_arima)
rm(list=ls())
alc_family <- ggplot(data = alc_sub, aes(x = famrel, fill = high_use)) + geom_bar() + ggtitle("Student consumption of alcohol and quality of family relationship")
alc <- read.csv("C:/Users/juhol/OneDrive/Documents/GitHub/IODS-project/data/alc.csv", header = T, sep = ",")
alc <- alc[,-1] # First column only duplicates the row numbers
dim(alc)
str(alc)
summary(alc)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(GGally)
library(car)
library(car)
library(sandwich)
library(lmtest)
variables_sub <- c("sex", "age", "activities", "romantic", "famrel", "goout", "high_use")
alc_sub <- select(alc, one_of(variables_sub))
str(alc_sub)
alc_sex <- ggplot(data = alc_sub, aes(x = sex, fill = high_use)) + geom_bar() + ggtitle("Student consumption of alcohol and sex")
alc_sex
alc_age <- ggplot(data = alc_sub, aes(x = age, fill = high_use)) + geom_bar() + ggtitle("Student consumption of alcohol and age")
alc_age
alc_act <- ggplot(data = alc_sub, aes(x = activities, fill = high_use)) + geom_bar() + ggtitle("Student consumption of alcohol and activities")
alc_act
alc_rom <- ggplot(data = alc_sub, aes(x = romantic, fill = high_use)) + geom_bar() + ggtitle("Student consumption of alcohol and romantic relationship")
alc_rom
alc_family <- ggplot(data = alc_sub, aes(x = famrel, fill = high_use)) + geom_bar() + ggtitle("Student consumption of alcohol and quality of family relationship")
alc_rom
alc_goout <- ggplot(data = alc_sub, aes(x = goout, fill = high_use)) + geom_bar() + ggtitle("Student consumption of alcohol and going out with friends")
alc_rom
alc_goout <- ggplot(data = alc_sub, aes(x = goout, fill = high_use)) + geom_bar() + ggtitle("Student consumption of alcohol and going out with friends")
alc_goout
glm1 <- glm(high_use ~ sex + age + activities + romantic + famrel + goout, data = alc_sub, family = "binomial")
summary(glm1)
step(glm1, direction = "backward")
summary(glm_best)
glm_best <- glm(formula = high_use ~ sex + activities + famrel + goout, family = "binomial",
data = alc_sub)
summary(glm_best)
ll.null <- glm_best$null.deviance/-2
ll.proposed <- glm_best$deviance/-2
ll.null <- glm_best$null.deviance/-2
ll.proposed <- glm_best$deviance/-2
pseudo_r_sqr <- (ll.null-ll.proposed)/ll.null
pseudo_r_sqr
ll.null2 <- glm1$null.deviance/-2
ll.proposed2 <- glm1$deviance/-2
pseudo_r_sqr_org <- (ll.null2-ll.proposed2)/ll.null2
pseudo_r_sqr_org
exp(0.9971)
2.71041/(1+2.71041)
1/2.71041/(1+1/2.71041)
exp(0.8118)
install.packages("cowplot")
library(cowplot)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(GGally)
library(cowplot)
## Predicted values of our model
predicted_data <- data.frame(
probability_of_hd=glm_best$fitted.values,
hd=data$hd)
## Predicted values of our model
predicted_data <- data.frame(
probability_of_hc=glm_best$fitted.values,
hc=alc_sub$high_use)
predicted_data <- predicted_data[
order(predicted_data$probability_of_hc, decreasing=FALSE),]
predicted_data$rank <- 1:nrow(predicted_data)
# Plotting
ggplot(data=predicted_data, aes(x=rank, y=probability_of_hc)) +
geom_point(aes(color=hd), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of high consumption of alcohol")
# Plotting
ggplot(data=predicted_data, aes(x=rank, y=probability_of_hc)) +
geom_point(aes(color=hc), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of high consumption of alcohol")
## Predicted values of our model
predicted_data <- data.frame(
probability_of_hc=glm_best$fitted.values,
high_consumption=alc_sub$high_use)
predicted_data <- predicted_data[
order(predicted_data$probability_of_hc, decreasing=FALSE),]
predicted_data$rank <- 1:nrow(predicted_data)
# Plotting
ggplot(data=predicted_data, aes(x=rank, y=probability_of_hc)) +
geom_point(aes(color=high_consumptionhigh_consumption), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of high consumption of alcohol")
## Predicted values of our model
predicted_data <- data.frame(
probability_of_hc=glm_best$fitted.values,
high_consumption=alc_sub$high_use)
predicted_data <- predicted_data[
order(predicted_data$probability_of_hc, decreasing=FALSE),]
predicted_data$rank <- 1:nrow(predicted_data)
# Plotting
ggplot(data=predicted_data, aes(x=rank, y=probability_of_hc)) +
geom_point(aes(color=high_consumptionhigh_consumption), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of high consumption of alcohol")
# Plotting
ggplot(data=predicted_data, aes(x=rank, y=probability_of_hc)) +
geom_point(aes(color=high_consumption), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of high consumption of alcohol")
setwd("C:/Users/juhol/OneDrive/Documents/GitHub/IODS-project")
