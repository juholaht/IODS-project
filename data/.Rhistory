y_12 <- matrix(c(1, 1.5), nrow = 2)
y_14 <- v + theta_1%*%y_13 + theta_2%*%y_12
Ey_14 <- v + theta_1%*%y_13 + theta_2%*%y_12
Ey_15 <-
Ey_15 <- 0
Ey_15 <- v + theta_1%*%Ey_14 + theta_2%*%y_13
Ey_14
Ey_15
49/20
ksi_1 <- theta_1
ksi_2 <- theta_2 - theta_1%*%theta_1
ksi_3 <- theta_1%*%theta_2 + (theta_2 - theta_1%*%theta_1)%*%theta_1
ksi_1
ksi_2
ksi_3
c_1 <- Cov
c_2 <- Cov + ksi_1%*%Cov%*%t(ksi_1)
ksi_1 <- theta_1
ksi_2 <- theta_2 + theta_1%*%theta_1
ksi_3 <- theta_1%*%theta_2 + (theta_2 - theta_1%*%theta_1)%*%theta_1
ksi_1
ksi_2
ksi_3
c_1 <- Cov
c_2 <- Cov + ksi_1%*%Cov%*%t(ksi_1)
c_2
Ey_14min <- Ey_14 - 1.96*c_1
1.96*c_1
Ey_14
y_13 <- matrix(c(0.7, 1.0), nrow = 2)
y_12 <- matrix(c(1, 1.5), nrow = 2)
Ey_14 <- v + theta_1%*%y_13 + theta_2%*%y_12
Ey_15 <- v + theta_1%*%Ey_14 + theta_2%*%y_13
Ey_14
Ey_15
ksi_1 <- theta_1
ksi_2 <- theta_2 + theta_1%*%theta_1
ksi_3 <- theta_1%*%theta_2 + (theta_2 - theta_1%*%theta_1)%*%theta_1
ksi_1
ksi_2
ksi_3
y_13 <- matrix(c(0.7, 1.0), nrow = 2)
y_12 <- matrix(c(1, 1.5), nrow = 2)
Ey_14 <- v + theta_1%*%y_13 + theta_2%*%y_12
Ey_15 <- v + theta_1%*%Ey_14 + theta_2%*%y_13
Ey_14
Ey_15
ksi_1 <- theta_1
ksi_2 <- theta_2 + theta_1%*%theta_1
ksi_3 <- theta_1%*%theta_2 + (theta_2 + theta_1%*%theta_1)%*%theta_1
ksi_1
ksi_2
ksi_3
c_2
qnorm(97.5, lower.tail = F)
qnorm(0.975, lower.tail = F)
q <- matrix(c(qnorm(0.975, lower.tail = F), qnorm(0.975, lower.tail = F)), nrow = 2)
q
Ey_14min <- Ey_14 - c_1%*%q
Ey_14min
Ey_14
q <- matrix(c(qnorm(0.975, lower.tail = T), qnorm(0.975, lower.tail = F)), nrow = 2)
Ey_14min <- Ey_14 - c_1%*%q
Ey_14min
q
q <- matrix(c(qnorm(0.975, lower.tail = T), qnorm(0.975, lower.tail = T)), nrow = 2)
Ey_14min <- Ey_14 - c_1%*%q
Ey_14max <- Ey_14 + c_1%*%q
c(Ey_14min, Ey_14max)
# 95 % confidence interval for E[y_14]
Ey_14min
Ey_14max
Ey_14
Ey_15
Ey_15min <- Ey_15 - c_2%*%q
Ey_15max <- Ey_15 + c_2%*%q
Ey_15min
Ey_15max
Ey_14min
Ey_14max
Ey_15min
Ey_15max
Ey_14
Ey_15
I <- matrix(c(1,0,0,1), nrow = 2)
v <- matrix(c(2,1), nrow = 2)
theta_1 <- matrix(c(0.5,0.4,0.1,0.5), nrow = 2)
theta_2 <- matrix(c(0,0.25,0,0), nrow = 2)
Cov <- matrix(c(0.09,0,0,0.4), nrow = 2)
C <- (I - theta_1 - theta_2)
C_inv <- solve(C)
Exp_y <- C_inv %*% v
# (5.945946, 9.729730)'
# b
ksi_1 <- theta_1
ksi_2 <- theta_2 + theta_1%*%theta_1
ksi_3 <- theta_1%*%theta_2 + (theta_2 + theta_1%*%theta_1)%*%theta_1
ksi_1
ksi_2
ksi_3
# c
y_13 <- matrix(c(0.7, 1.0), nrow = 2)
y_12 <- matrix(c(1, 1.5), nrow = 2)
Ey_14 <- v + theta_1%*%y_13 + theta_2%*%y_12
Ey_15 <- v + theta_1%*%Ey_14 + theta_2%*%y_13
Ey_14
Ey_15
# E[y_14] = (2.45, 2.03)' and E[y_15] = (3.43, 3.17)'
# d
c_1 <- Cov
c_2 <- Cov + ksi_1%*%Cov%*%t(ksi_1)
# Quantil Multiplier
q <- matrix(c(qnorm(0.975, lower.tail = T), qnorm(0.975, lower.tail = T)), nrow = 2)
# 95 % confidence interval for E[y_14]
Ey_14min <- Ey_14 - c_1%*%q
Ey_14max <- Ey_14 + c_1%*%q
Ey_14min
Ey_14max
# 95 % confidence interval for E[y_15]
Ey_15min <- Ey_15 - c_2%*%q
Ey_15max <- Ey_15 + c_2%*%q
Ey_15min
Ey_15max
I <- matrix(c(1,0,0,1), nrow = 2)
v <- matrix(c(2,1), nrow = 2)
theta_1 <- matrix(c(0.5,0.4,0.1,0.5), nrow = 2)
theta_2 <- matrix(c(0,0.25,0,0), nrow = 2)
Cov <- matrix(c(0.09,0,0,0.04), nrow = 2)
C <- (I - theta_1 - theta_2)
C_inv <- solve(C)
Exp_y <- C_inv %*% v
# (5.945946, 9.729730)'
# b
ksi_1 <- theta_1
ksi_2 <- theta_2 + theta_1%*%theta_1
ksi_3 <- theta_1%*%theta_2 + (theta_2 + theta_1%*%theta_1)%*%theta_1
ksi_1
ksi_2
ksi_3
# c
y_13 <- matrix(c(0.7, 1.0), nrow = 2)
y_12 <- matrix(c(1, 1.5), nrow = 2)
Ey_14 <- v + theta_1%*%y_13 + theta_2%*%y_12
Ey_15 <- v + theta_1%*%Ey_14 + theta_2%*%y_13
Ey_14
Ey_15
c_1 <- Cov
c_2 <- Cov + ksi_1%*%Cov%*%t(ksi_1)
q <- matrix(c(qnorm(0.975, lower.tail = T), qnorm(0.975, lower.tail = T)), nrow = 2)
Ey_14min <- Ey_14 - c_1%*%q
Ey_14max <- Ey_14 + c_1%*%q
Ey_14min
Ey_14max
Ey_15min <- Ey_15 - c_2%*%q
Ey_15max <- Ey_15 + c_2%*%q
Ey_15min
Ey_15max
c_1
c_2
Ey_14min
Ey_14max
Ey_15min
Ey_15max
TPdata <- read_delim("Tyokansio/Econometrics_II/assigment_2/TPdata.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(TPdata)
TPdata <- read_delim("Tyokansio/Econometrics_II/assigment_2/TPdata.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
library(readr)
TPdata <- read_delim("Tyokansio/Econometrics_II/assigment_2/TPdata.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(TPdata)
head(TPdata)
PCR_log <- log(ts(TPdata$PCR, frequency = 4, start = c(1970,1), end = c(2007,4)))
ITR_log <- log(ts(TPdata$ITR, frequency = 4, start = c(1970,1), end = c(2007,4)))
TP <- data.frame(PCR_log, ITR_log)
TP
library(dplyr)
TP <- mutate(TP, PCR_log_lag = lag(PCR_log)) %>% mutate(TP, PCR_log_dif = PCR_log - PCR_log_lag) %>% select(TP, - PCR_log_lag)
TP <- mutate(TP, PCR_log_lag = lag(PCR_log))
TP <- mutate(TP, PCR_log_lag = lag(PCR_log)) %>% mutate(TP, PCR_log_dif = PCR_log - PCR_log_lag)
TP <- mutate(TP, PCR_log_lag = lag(PCR_log)) %>% mutate(PCR_log_dif = PCR_log - PCR_log_lag) %>% select(- PCR_log_lag)
TP
TP <- mutate(TP, ITR_log_lag = lag(ITR_log)) %>% mutate(ITR_log_dif = ITR_log - ITR_log_lag) %>% select(- ITR_log_lag)
head(TP)
plot.ts(TP$PCR_log_dif)
plot.ts(TP$ITR_log)
plot.ts(TP$ITR_log_dif)
acf(TP$PCR_log_dif)
acf(TP$PCR_log_dif, na.rm = TRUE)
nrow(TP)
acf_PCR <- slice(TP, 2:nrow(TP)) %>% select(PCR_log_dif) %>% acf()
pacf_PCR <- slice(TP, 2:nrow(TP)) %>% select(PCR_log_dif) %>% pacf()
acf_ITR <- slice(TP, 2:nrow(TP)) %>% select(ITR_log_dif) %>% acf()
pacf_ITR <- slice(TP, 2:nrow(TP)) %>% select(ITR_log_dif) %>% pacf()
?acf()
acf(ITR_log_dif, na.action = na.pass)
acf(TP$ITR_log_dif, na.action = na.pass)
acf(TP$ITR_log_dif, na.action = na.pass, main = "ACF for ITR")
pacf(TP$ITR_log_dif, na.action = na.pass, main = "PACF for ITR")
acf(TP$PCR_log_dif, na.action = na.pass, main = "ACF for PCR")
pacf(TP$PCR_log_dif, na.action = na.pass, main = "PACF for PCR")
library(vars)
install.packages("vars")
library(vars)
Y <- ts(cbind(TP$PCR_log_dif, TP$ITR_log_dif), frequency=4, start=c(1970,2))
plot.ts(Y)
var_selected <- VARselect(Y, type = "const", lag.max = 6)
Y
var_selected <- slice(Y, 2:nrow(Y)) %>% VARselect(type = "const", lag.max = 6)
var_selected <- dplyr::slice(Y, 2:nrow(Y)) %>% VARselect(type = "const", lag.max = 6)
dplyr::slice(Y, 2:nrow(Y))
var_selected <- Y[2:nrow(Y),] %>% VARselect(type = "const", lag.max = 6)
var_selected
var_selected$selection
var_selected$selection[3]
var_model <- VAR(Y, p = 1, type = "const")
var_model <- Y[2:nrow(Y),] %>% VAR(p = 1, type = "const")
summary(var_model)
plot.ts(var_model)
plot(var_model)
var <- var_model
serial.test(var, type="PT.adjusted", lags.bg=10)
serial.test(var, type="BG", lags.bg = 6)
pt_adj <- serial.test(var, type="PT.adjusted", lags.bg = 10)
pt_adj$resid
pt_adj
pt_adj$serial
pt_adj$serial[1]
pt_adj$serial[2]
pt_adj$serial[3]
pt_adj$serial[3] > 0.5
pt_adj$serial[3] > 0.05
fun.pt_and_BG <- function(model) {
pt_adj <- serial.test(model, type="PT.adjusted", lags.bg = 10)
bg <-serial.test(model, type="BG", lags.bg = 6)
pt_adj_p <- pt_adj$serial[3] # p-value of PT.adjusted
bg_p <- bg$serial[3] # p-value of BG
if((pt_adj_p < 0.05) & (bg_p < 0.05)){
print("Rejected by PT.adjusted and BG")
} else if((pt_adj_p > 0.05) & (bg_p < 0.05)) {
print("Rejected by BG and not rejected by PT.adjusted")
} else if((pt_adj_p < 0.05) & (bg_p > 0.05)) {
print("Rejected by PT.adjusted and not rejected by BG")
} else if((pt_adj_p > 0.05) & (bg_p > 0.05)) {
print("Not rejected by PT.adjusted or BG")
}
}
fun.pt_and_BG(var_model)
var_model2 <- Y[2:nrow(Y),] %>% VAR(p = 2, type = "const")
fun.pt_and_BG(var_model2)
var_model3 <- Y[2:nrow(Y),] %>% VAR(p = 3, type = "const")
fun.pt_and_BG(var_model3)
var_model4 <- Y[2:nrow(Y),] %>% VAR(p = 4, type = "const")
fun.pt_and_BG(var_model4)
fun.pt_and_BG <- function(model) {
pt_adj <- serial.test(model, type="PT.adjusted", lags.pt = 10)
bg <-serial.test(model, type="BG", lags.bg = 6)
pt_adj_p <- pt_adj$serial[3] # p-value of PT.adjusted
bg_p <- bg$serial[3] # p-value of BG
if((pt_adj_p < 0.05) & (bg_p < 0.05)){
print("Rejected by PT.adjusted and BG")
} else if((pt_adj_p > 0.05) & (bg_p < 0.05)) {
print("Rejected by BG and not rejected by PT.adjusted")
} else if((pt_adj_p < 0.05) & (bg_p > 0.05)) {
print("Rejected by PT.adjusted and not rejected by BG")
} else if((pt_adj_p > 0.05) & (bg_p > 0.05)) {
print("Not rejected by PT.adjusted or BG")
}
}
fun.pt_and_BG(var_model)
var_model2 <- Y[2:nrow(Y),] %>% VAR(p = 2, type = "const")
fun.pt_and_BG(var_model2)
fun.pt_and_BG(var_model3)
fun.pt_and_BG(var_model4)
serial.test(var_model4, type="PT.adjusted", lags.pt = 10)
serial.test(var_model4, type="BG", lags.bg = 6)
summary(var_model4)
plot(var_model4)
?causality
causality(var_model4, cause = "TP.PCR_log_dif")
causality(var_model4, cause = "TP.ITR_log_dif")
USrates <- read_delim("Tyokansio/Econometrics_II/assigment_4/USrates.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(USrates)
head(USrates)
library(zoo)
starts <- as.yearqtr(1958:1, format = "yyyy:q")
starts
starts <- as.yearqtr("1958:1", format = "yyyy:q")
starts
starts <- as.yearqtr("1958:1", format = "%Y:%q")
starts
end <- as.yearqtr("1998:4", format = "%Y:%q")
end
ends <- as.yearqtr("1998:4", format = "%Y:%q")
date <- seq(from = starts, to = ends, by = "quarter")
starts <- as.Date("1958/01/01", format = "%Y/%m/%d")
starts
rm(ends)
date <- seq(from = starts, by = "quarter", length.out = nrow(USrates))
date
date <- as.yearqtr(date)
date
USrates <- bind_cols(USrates, date)
USrates <- data.frame(USrates, date)
head(USrates)
USrates <- slice(USrates, date >= "1970 Q1")
View(USrates)
USrates <- read_delim("Tyokansio/Econometrics_II/assigment_4/USrates.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
starts <- as.Date("1958/01/01", format = "%Y/%m/%d")
date <- seq(from = starts, by = "quarter", length.out = nrow(USrates))
date <- as.yearqtr(date)
USrates <- data.frame(USrates, date)
View(USrates)
USrates <- filter(USrates, date >= "1970 Q1")
View(USrates)
library(ggplot2)
library(tidyr)
USrates_data <- select(USrates, everything()) %>% gather(key = "Interest rate", value = "rate", -date)
USrates_data <- dplyr::select(USrates, everything()) %>% gather(key = "Interest rate", value = "rate", -date)
View(USrates_data)
USrates_data <- dplyr::select(USrates, everything()) %>% gather(key = "interest rate", value = "rate", -date)
ggplot(USrates_data, aes(x = date, y = rate)) + geom_line(aes(color = rate))
USrates_data <- dplyr::select(USrates, everything()) %>% gather(key = "interest_rate", value = "rate", -date)
ggplot(USrates_data, aes(x = date, y = rate)) + geom_line(aes(color = interest_rate))
ggplot(USrates_data, aes(x = date, y = rate)) + geom_line(aes(color = interest_rate)) + stat_smooth(color = interest_rate)
ggplot(USrates_data, aes(x = date, y = rate)) + geom_line(aes(color = interest_rate)) + stat_smooth()
ggplot(USrates_data, aes(x = date, y = rate)) + geom_line(aes(color = interest_rate))
adf = ur.df(USrates$r1, type="drift", selectlags="BIC");
summary(adf)
adf@teststat
adf = ur.df(USrates$r1, type="drift", selectlags="BIC");
summary(adf)
pnorm(1.9606)
2*(1 - 1.9606)
2*(1 - 1.9606)
2*(1 - 0.9750371)
rm(adf)
adf = ur.df(USrates$r1, type="drift", selectlags="BIC")
adf@teststat
adf@cval
adf@teststat[1]
adf@cval[2]
adf@cval[1]
adf@cval[4]
adf@cval[3]
adf@teststat[1]
adf@cval[3]
rm(adf)
fun.df <- function(data) {
adf <- ur.df(data, type="drift", selectlags="BIC")
t <- adf@teststat[1] # t-test result for unit root in case of type drift
c <- adf@cval[3] # critical value fot t-test for unit root in case of type drift
if(c < t){
print("Simple H0 of unit root is not rejected")
} else {
print("Simple H0 of unit root is rejected")
}
}
fun.df(USrates$r1)
fun.df(USrates$r2)
fun.df(USrates$r3)
regression <- lm(USrate$r2~USrate$r1)
regression <- lm(r2 ~ r1, data = USrates)
summary(regression)
e <- regression$residuals
qplot(y = e)
plot(regression)
qplot(y = e) + geom_smooth()
adf_ea <- ur.df(e, type="drift", selectlags="BIC")
summary(adf_ea)
qplot(y = e) + geom_smooth() + geom_smooth(model = lm)
qplot(y = e) + geom_smooth()
spread <- r2 - r1
spread <- USrates$r2 - USrates$r1
qplot(y = spread)
USrates <- mutate(USrates, spread = r2 -r1)
qplot(USrates, x = date, y = spread)
qplot(USrates, aes(x = date, y = spread))
USrates
ggplot(USrates, aes(x = date, y = spread)) + geom_line()
ggplot(USrates, aes(x = date, y = spread)) + geom_line() + geom_smooth()
adf_eh = ur.df(USrates$spread, type="drift", selectlags="BIC")
summary(adf_eh)
fun.df(adf_eh)
fun.df(spread)
?ca.jo
y_johansen <-select(USrates, r1, r2)
y_johansen <- dplyr::select(USrates, r1, r2)
vecm = ca.jo(y_johansen, K=3, ecdet="const", type="trace", spec="transitory")
summary(vecm)
?blrtest
H1 <- matrix(c(1,-1,0,0,0,1), c(3,2))
H1
summary(blrtest(vecm, H = H1, r = 1))
USrates <- mutate(USrates, r1_dif = lag(r1))
VAR1 <- slice(USrates, 2:nrow(USrates)) %>% VAR(p=2,type="const")
slice(USrates, 2:nrow(USrates))
VAR1 <- slice(USrates, 2:nrow(USrates)) %>% select(spread, r1_dif) %>% VAR(p=2,type="const")
VAR1 <- slice(USrates, 2:nrow(USrates)) %>% dplyr::select(spread, r1_dif) %>% VAR(p=2,type="const")
summary(VAR1)
causality(VAR1,cause="spread")
regression_2 <- lm(r3 ~ r1, data = USrates)
e_2 <- regression_2$residuals
qplot(y = e_2) + geom_smooth()
library(readr)
library(dplyr)
library(vars)
library(zoo)
library(ggplot2)
library(tidyr)
qplot(y = e_2) + geom_smooth()
adf_ea2 <- ur.df(e2, type="drift", selectlags="BIC")
e_2 <- regression_2$residuals
qplot(y = e_2) + geom_smooth()
adf_ea2 <- ur.df(e_2, type="drift", selectlags="BIC")
summary(adf_ea2)
y_johansen2 <- dplyr::select(USrates, r1, r2, r3)
vecm2 <- ca.jo(y_johansen2, K=2, ecdet="const", type="trace", spec="transitory")
summary(vecm2)
I <- matrix(c(1,0,0,1), nrow = 2)
v <- matrix(c(2,1), nrow = 2)
theta_1 <- matrix(c(0.5,0.4,0.1,0.5), nrow = 2)
theta_2 <- matrix(c(0,0.25,0,0), nrow = 2)
Cov <- matrix(c(0.09,0,0,0.04), nrow = 2)
C <- (I - theta_1 - theta_2)
C_inv <- solve(C)
Exp_y <- C_inv %*% v
# (5.945946, 9.729730)'
# b
ksi_1 <- theta_1
ksi_2 <- theta_2 + theta_1%*%theta_1
ksi_3 <- theta_1%*%theta_2 + (theta_2 + theta_1%*%theta_1)%*%theta_1
ksi_1
ksi_2
ksi_3
# c
y_13 <- matrix(c(0.7, 1.0), nrow = 2)
y_12 <- matrix(c(1, 1.5), nrow = 2)
Ey_14 <- v + theta_1%*%y_13 + theta_2%*%y_12
Ey_15 <- v + theta_1%*%Ey_14 + theta_2%*%y_13
Ey_14
Ey_15
# E[y_14] = (2.45, 2.03)' and E[y_15] = (3.43, 3.17)'
# d
c_1 <- Cov
c_2 <- Cov + ksi_1%*%Cov%*%t(ksi_1)
# e
# Quantil Multiplier
q <- matrix(c(qnorm(0.975, lower.tail = T), qnorm(0.975, lower.tail = T)), nrow = 2)
# 95 % confidence interval for E[y_14]
Ey_14min <- Ey_14 - c_1%*%q
Ey_14max <- Ey_14 + c_1%*%q
Ey_14min
Ey_14max
# 95 % confidence interval for E[y_15]
Ey_15min <- Ey_15 - c_2%*%q
Ey_15max <- Ey_15 + c_2%*%q
Ey_15min
Ey_15max
getwd()
setwd("C:/Users/juhol/OneDrive/Documents/GitHub/IODS-project/data")
library(dplyr)
library(tidyr)
BPRS <- read.csv("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", stringsAsFactors = F, seperator = "\t", header = T)
BPRS <- read.csv("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", stringsAsFactors = F, sep = "\t", header = T)
RATS <- read.csv("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt", stringsAsFactors = F, sep = "\t", header = T)
View(BPRS)
?read.csv
BPRS <- read.csv("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", stringsAsFactors = F, sep = "", header = T)
View(BPRS)
View(RATS)
str(BPRS)
colnames(BPRS)
str(RATS)
colnames(RATS)
summary(BPRS)
summary(RATS)
str(BPRS)
BPRS$treatment <- as.factor(BPRS$treatment)
BPRS$subject <- as.factor(BPRS$subject)
str(RATS)
RATS$ID <- as.factor(RATS$ID)
RATS$Group <- as.factor(RATS$Group)
BPRSL <-  BPRS %>% gather(key = weeks, value = bprs, -treatment, -subject)
str(BPRS)
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr(weeks, 5, 5)))
str(BPRS)
str(BPRSL)
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr(weeks, 5, 5)))
str(BPRSL)
glimpse(BPRSL)
max(BPRSL$week)
rm(BPRSL)
BPRSL <-  BPRS %>%
gather(key = weeks, value = bprs, -treatment, -subject) %>%
mutate(week = as.integer(substr(weeks, 5, 5)))
RATSL <- RATS %>%
gather(key = WD, value = Weight, -ID, -Group) %>%
mutate(Time = as.integer(substr(WD, 3,4)))
View(BPRSL)
View(RATS)
View(RATSL)
str(BPRSL)
colnames(BPRSL)
summary(BPRSL)
str(RATSL)
colnames(RATSL)
summary(RATSL)
load("~/GitHub/IODS-project/data/meet_and_repeat.Rdata")
